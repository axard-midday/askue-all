Требования к библиотеке
1. Сменить тип uin8_array_t на структуру вида:
{
  size_t Size;
  uint8_t *Item;
};
  Нужны буду функции:
    _new
    _delete
    _append
    _update
    _extract - выделяет из массива uin8_array_t подмассив путём полного копирования
      указанного промежутка.
    

2. Добавить в библиотеку макросы из macro.h

3. Перенести в библиотеку write_msg.c, write_msg.h

4. Добавить в библиотеку описание типов аргумента скриптов и т.д.

5. Добавить функции:
  int port_write ( const script_cfg_t *Cfg, const uint8_array_t *u8a );
    0 - успех
    -1 - ошибка

  int port_read ( const script_cfg_t *Cfg, uint8_array_t *u8a );
    0 - успех
    -1 - ошибка

6. Добавить функцию:
  registration_save ( const script_cfg_t *Cfg, const char *RegType, ... );
    0 - успех
    -1 - ошибка

7. Добавить вычисление и проверку контрольных сумм.

8. Добавить макросы структуры скрипта, такие как StartScript(), EndScript(), BreakScript() и так далее.

9. Добавить обработку сигналов InitScript. Обработчик перехватывает сигнал SIGUSR2, закрывает все файлы,
   удаляет конфигурацию, завершает выполнение скрипта.
   
     /*
      * ТЕЛО СКРИПТА
      * ЗДЕСЬ ИСПОЛЬЗУЮТСЯ БИБЛИОТЕЧНЫЕ ФУНКЦИИ ОБМЕНА С ПОРТОМ
      * PORT_WRITE ( CONST SCRIPT_CFG_T *CFG, CONST UINT8_ARRAY_T *U8A );
      * PORT_READ ( CONST SCRIPT_CFG_T *CFG, UINT8_ARRAY_T *U8A );
      * ЭТИ ФУНКЦИИ СБРАСЫВАЮТ ДАННЫЕ ИЗ U8A В ЛОГ ПРИ НАЛИЧИИ ФЛАГА --PROTOCOL В СЛЕДУЮЩЕМ ВИДЕ:
      *  ПРИ ЧТЕНИИ:
      *   [ <TIME> | SCRIPT | OK ]: IN: <ПРИНЯТЫЕ БАЙТЫ>\N
      *  ПРИ ЗАПИСИ:
      *   [ <TIME> | SCRIPT | OK ]: OUT: <ПЕРЕДАННЫЕ БАЙТЫ>\N
      * РЕШЕНИЕ О ФОРМАТЕ ВЫВОДА ПРИНЯТЫХ БАЙТ ПРОГРАММА ПРИНИМАЕТ САМА, НА ОСНОВАНИИ ПРОВЕРКИ 
      * ВСЕГО ПОТОКА НА ВХОЖДЕНИЕ В МНОЖЕСТВО СИМВОЛОВ ASCII ( БЕЗ УЧЁТА ФОРМАТА ПЕРВОГО И ПОСЛЕДНЕГО СИМВОЛА )
      * ПЕРВЫЙ И ПОСЛЕДНИЙ СИМВОЛ ПЕЧАТАЮТСЯ ИСХОДЯ ИЗ ВЫБРАННОГО РЕЖИМА.
      * 
      * ТАК ЖЕ ИСПОЛЬЗУЕТСЯ ФУНКЦИЯ SAVE_REGISTRATION ( CONST SCRIPT_CFG_T *CFG, CONST CHAR *REGTYPE, ... )
      * В КАЧЕСТВЕ ДОПОЛНИТЕЛЬНОГО АРГУМЕНТА МОЖЕТ ПРИНИМАТЬСЯ DOUBLE ИЛИ INT.
      * ПРИ УКАЗАНИИ КЛЮЧА --VERBOSE В ПРОТОКОЛ И В ЛОГ ПРОИСХОДЯ ЗАПИСИ СЛЕДУЮЩЕГО ВИДА
      *   [ <TIME> | SCRIPT | OK ]: <REGTYPE>: <VALUE>\N
      * 
      * ПРОВЕРКА ПО CRC ОПИСАНА В БИБЛИОТЕКЕ. 
      * ФУНКЦИИ ПАРСИНГА СООБЩЕНИЯ ПРОПИСАНЫ В СКРИПТЕ. 
      * РАЗБОР ОШИБОК ПРОТОКОЛА ПРОПИСАН В СКРИПТЕ.
      * 
      * СООБЩЕНИЯ ОБ ОШИБКАХ В ФУНКЦИЯХ ГЕНЕРЯТСЯ ВНУТРИ БИБЛИОТЕКИ И ЗАПИСЫВАЮТСЯ В ЛОГ, ЕСЛИ ОН УКАЗАН.
      */
10. Перенести обёртки из my.h my.c в библиотеку

11. Добавить функции разбора аргументов командной строки из cli.h cli.c в библиотеку

Файловая структура библиотеки
libaskue.h
 -> checksum.h - вычисление и проверка контрольных сумм.
 -> uint8_array.h - массив байт.
 -> rs232.h - настройки последовательного порта и функции открыть/закрыть.
 -> port.h - функции чтения/записи порта.
 -> registration.h - функции работы с показаниями. Сохранение в журнал, например.
 -> write_msg.h - вывод сообщений в едином стиле АСКУЭ.
 -> script.h - макросы и типы для скрипта.
 -> macro.h - макросы общего пользования.
 -> my.h - обёртки для работы с памятью.
 -> bcd.h - функции конвертации двоично-десятичных чисел в десятичные и назад
 -> cli.h - функции разбора аргументов командной строки
     
     